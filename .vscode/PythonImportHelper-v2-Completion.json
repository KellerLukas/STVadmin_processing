[
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Database",
        "importPath": "src.utils.databases",
        "description": "src.utils.databases",
        "isExtraImport": true,
        "detail": "src.utils.databases",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "src.utils.databases",
        "description": "src.utils.databases",
        "isExtraImport": true,
        "detail": "src.utils.databases",
        "documentation": {}
    },
    {
        "label": "MailBasedFamily",
        "importPath": "src.utils.databases",
        "description": "src.utils.databases",
        "isExtraImport": true,
        "detail": "src.utils.databases",
        "documentation": {}
    },
    {
        "label": "MailBasedDatabase",
        "importPath": "src.utils.databases",
        "description": "src.utils.databases",
        "isExtraImport": true,
        "detail": "src.utils.databases",
        "documentation": {}
    },
    {
        "label": "MailBasedDatabase",
        "importPath": "src.utils.databases",
        "description": "src.utils.databases",
        "isExtraImport": true,
        "detail": "src.utils.databases",
        "documentation": {}
    },
    {
        "label": "Database",
        "importPath": "src.utils.databases",
        "description": "src.utils.databases",
        "isExtraImport": true,
        "detail": "src.utils.databases",
        "documentation": {}
    },
    {
        "label": "Database",
        "importPath": "src.utils.databases",
        "description": "src.utils.databases",
        "isExtraImport": true,
        "detail": "src.utils.databases",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "src.utils.databases",
        "description": "src.utils.databases",
        "isExtraImport": true,
        "detail": "src.utils.databases",
        "documentation": {}
    },
    {
        "label": "MailBasedDatabase",
        "importPath": "src.utils.databases",
        "description": "src.utils.databases",
        "isExtraImport": true,
        "detail": "src.utils.databases",
        "documentation": {}
    },
    {
        "label": "MailBasedFamily",
        "importPath": "src.utils.databases",
        "description": "src.utils.databases",
        "isExtraImport": true,
        "detail": "src.utils.databases",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "src.utils.databases",
        "description": "src.utils.databases",
        "isExtraImport": true,
        "detail": "src.utils.databases",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "src.utils.databases",
        "description": "src.utils.databases",
        "isExtraImport": true,
        "detail": "src.utils.databases",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "md5",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "OnePassword",
        "importPath": "onepassword",
        "description": "onepassword",
        "isExtraImport": true,
        "detail": "onepassword",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "ADULT_CAT",
        "importPath": "src",
        "description": "src",
        "isExtraImport": true,
        "detail": "src",
        "documentation": {}
    },
    {
        "label": "EHRENMITGLIEDER_CAT",
        "importPath": "src",
        "description": "src",
        "isExtraImport": true,
        "detail": "src",
        "documentation": {}
    },
    {
        "label": "NOT_ACTIVE_ERW_CAT",
        "importPath": "src",
        "description": "src",
        "isExtraImport": true,
        "detail": "src",
        "documentation": {}
    },
    {
        "label": "MALE",
        "importPath": "src",
        "description": "src",
        "isExtraImport": true,
        "detail": "src",
        "documentation": {}
    },
    {
        "label": "JUGEND_CAT",
        "importPath": "src",
        "description": "src",
        "isExtraImport": true,
        "detail": "src",
        "documentation": {}
    },
    {
        "label": "is_jugend_riege",
        "importPath": "src",
        "description": "src",
        "isExtraImport": true,
        "detail": "src",
        "documentation": {}
    },
    {
        "label": "DynamicsClient",
        "importPath": "src.utils.dynamics_client",
        "description": "src.utils.dynamics_client",
        "isExtraImport": true,
        "detail": "src.utils.dynamics_client",
        "documentation": {}
    },
    {
        "label": "CleverreachDatabase",
        "importPath": "src.utils.cleverreach_database",
        "description": "src.utils.cleverreach_database",
        "isExtraImport": true,
        "detail": "src.utils.cleverreach_database",
        "documentation": {}
    },
    {
        "label": "CleverreachDatabase",
        "importPath": "src.utils.cleverreach_database",
        "description": "src.utils.cleverreach_database",
        "isExtraImport": true,
        "detail": "src.utils.cleverreach_database",
        "documentation": {}
    },
    {
        "label": "AdressDatabase",
        "importPath": "src.utils.adress_databases",
        "description": "src.utils.adress_databases",
        "isExtraImport": true,
        "detail": "src.utils.adress_databases",
        "documentation": {}
    },
    {
        "label": "RiegenAdressDatabase",
        "importPath": "src.utils.adress_databases",
        "description": "src.utils.adress_databases",
        "isExtraImport": true,
        "detail": "src.utils.adress_databases",
        "documentation": {}
    },
    {
        "label": "WORKING_DIR_PATH",
        "importPath": "src.config.paths",
        "description": "src.config.paths",
        "isExtraImport": true,
        "detail": "src.config.paths",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "signal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "signal",
        "description": "signal",
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "STVAdminExportClient",
        "importPath": "src.STVAdmin_export_client",
        "description": "src.STVAdmin_export_client",
        "isExtraImport": true,
        "detail": "src.STVAdmin_export_client",
        "documentation": {}
    },
    {
        "label": "cmd_doc",
        "kind": 5,
        "importPath": ".venv.bin.runxlrd",
        "description": ".venv.bin.runxlrd",
        "peekOfCode": "cmd_doc = \"\"\"\nCommands:\n2rows           Print the contents of first and last row in each sheet\n3rows           Print the contents of first, second and last row in each sheet\nbench           Same as \"show\", but doesn't print -- for profiling\nbiff_count[1]   Print a count of each type of BIFF record in the file\nbiff_dump[1]    Print a dump (char and hex) of the BIFF records in the file\nfonts           hdr + print a dump of all font objects\nhdr             Mini-overview of file (no per-sheet information)\nhotshot         Do a hotshot profile run e.g. ... -f1 hotshot bench bigfile*.xls",
        "detail": ".venv.bin.runxlrd",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.bin.runxlrd",
        "description": ".venv.bin.runxlrd",
        "peekOfCode": "options = None\nif __name__ == \"__main__\":\n    import xlrd\n    import sys\n    import time\n    import glob\n    import traceback\n    import gc\n    from xlrd.timemachine import xrange, REPR\n    class LogHandler(object):",
        "detail": ".venv.bin.runxlrd",
        "documentation": {}
    },
    {
        "label": "WORKING_DIR_PATH",
        "kind": 5,
        "importPath": "src.config.paths",
        "description": "src.config.paths",
        "peekOfCode": "WORKING_DIR_PATH = \"/Users/Lukas/Library/CloudStorage/OneDrive-FreigegebeneBibliotheken–TurnvereinWürenlos/Kommunikation - Dokumente/Interne Kommunikation/CleverReach/Adressen/\"",
        "detail": "src.config.paths",
        "documentation": {}
    },
    {
        "label": "AdressDatabase",
        "kind": 6,
        "importPath": "src.utils.adress_databases",
        "description": "src.utils.adress_databases",
        "peekOfCode": "class AdressDatabase:\n    def __init__(self, input_file: str = None, input_db: Database = None):\n        self.columns = [\n            \"Vorname\",\n            \"Nachname\",\n            \"Strasse\",\n            \"PLZ\",\n            \"Ort\",\n            \"Geburtsdatum\",\n            \"Kategorie\",",
        "detail": "src.utils.adress_databases",
        "documentation": {}
    },
    {
        "label": "RiegenAdressDatabase",
        "kind": 6,
        "importPath": "src.utils.adress_databases",
        "description": "src.utils.adress_databases",
        "peekOfCode": "class RiegenAdressDatabase:\n    def __init__(self, member_ad_db: AdressDatabase, coach_ad_db: AdressDatabase):\n        member_df = member_ad_db.df\n        member_df[\"Funktion\"] = \"Mitglied\"\n        coach_df = coach_ad_db.df\n        coach_df[\"Funktion\"] = \"Leiter*in\"\n        self.df = pd.concat([member_df, coach_df])\n    def to_excel(self, filename: str):\n        path = Path(filename).parent\n        path.mkdir(parents=True, exist_ok=True)",
        "detail": "src.utils.adress_databases",
        "documentation": {}
    },
    {
        "label": "CleverreachDatabase",
        "kind": 6,
        "importPath": "src.utils.cleverreach_database",
        "description": "src.utils.cleverreach_database",
        "peekOfCode": "class CleverreachDatabase:\n    def __init__(self, input_file: str = None, input_mb_database: MailBasedDatabase = None):\n        self.categories = [\n            \"Aktive Turner\",\n            \"Aktive Turnerin\",\n            \"Passivmitglied\",\n            \"Kitu\",\n            \"Mädchen\",\n            \"Knaben\",\n            \"Freimitglied turnend\",",
        "detail": "src.utils.cleverreach_database",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "src.utils.databases",
        "description": "src.utils.databases",
        "peekOfCode": "class Person:\n    def __init__(\n        self,\n        member_number: int = None,\n        gender: str = None,\n        first_name: str = None,\n        last_name: str = None,\n        street: str = None,\n        plz = None,\n        city: str = None,",
        "detail": "src.utils.databases",
        "documentation": {}
    },
    {
        "label": "Database",
        "kind": 6,
        "importPath": "src.utils.databases",
        "description": "src.utils.databases",
        "peekOfCode": "class Database:\n    def __init__(self, input_file: str = None):\n        self.people = []\n        self.riegen = None\n        if input_file is not None:\n            self.people = self._load_people_from_input_file(input_file)\n    def lookup_by_property(self, property: str, search_input, comparator=None) -> list[Person]:\n        comparator = comparator or np.equal\n        people_found = []\n        for person in self.people:",
        "detail": "src.utils.databases",
        "documentation": {}
    },
    {
        "label": "MailBasedFamily",
        "kind": 6,
        "importPath": "src.utils.databases",
        "description": "src.utils.databases",
        "peekOfCode": "class MailBasedFamily:\n    def __init__(self, people: list[Person]):\n        assert self.__all_emails_are_equal(people)\n        assert len(people) > 0\n        self.people = people\n        self.email = self.people[0].email\n    def get_property_list(self, property: str) -> list:\n        property_list = list(set([getattr(person, property, None) for person in self.people]))\n        property_list.sort()\n        return property_list",
        "detail": "src.utils.databases",
        "documentation": {}
    },
    {
        "label": "MailBasedDatabase",
        "kind": 6,
        "importPath": "src.utils.databases",
        "description": "src.utils.databases",
        "peekOfCode": "class MailBasedDatabase:\n    def __init__(self, input_file: str = None, input_db: Database = None):\n        self.mail_based_families = []\n        self.input_db = input_db\n        if input_file is not None:\n            self.input_db = Database(input_file)\n        if self.input_db is not None:\n            self.add_from_database(self.input_db)\n    def add_from_database(self, db: Database):\n        for person in db.people:",
        "detail": "src.utils.databases",
        "documentation": {}
    },
    {
        "label": "EXCEPTIONS_MEMBER_NUMBERS",
        "kind": 5,
        "importPath": "src.utils.databases",
        "description": "src.utils.databases",
        "peekOfCode": "EXCEPTIONS_MEMBER_NUMBERS = [317492, 871369] # Those entries are somehow broken in the source database. As they are not required, its easiest to just exclude them.\nclass Person:\n    def __init__(\n        self,\n        member_number: int = None,\n        gender: str = None,\n        first_name: str = None,\n        last_name: str = None,\n        street: str = None,\n        plz = None,",
        "detail": "src.utils.databases",
        "documentation": {}
    },
    {
        "label": "DynamicsClient",
        "kind": 6,
        "importPath": "src.utils.dynamics_client",
        "description": "src.utils.dynamics_client",
        "peekOfCode": "class DynamicsClient:\n    def __init__(self, working_dir: str = None, debugging_mode: bool = False):\n        self._client = None\n        if working_dir is None:\n            working_dir = os.getcwd()\n        self.download_location = os.path.join(working_dir, \"dynamics_client_temp_folder\")\n        self.create_temporary_download_folder()\n        self.creds = STVAdminCreds()\n        self._debugging_mode = debugging_mode\n    def __del__(self):",
        "detail": "src.utils.dynamics_client",
        "documentation": {}
    },
    {
        "label": "STVAdminCreds",
        "kind": 6,
        "importPath": "src.utils.dynamics_client",
        "description": "src.utils.dynamics_client",
        "peekOfCode": "class STVAdminCreds:\n    def __init__(self):\n        self._client_id = None\n        self._client_secret = None\n        self.op = OnePassword()\n        self.item_uuid = \"utpuxkadynh4bnoqufqp5umzvy\"\n    @property\n    def client_id(self):\n        if self._client_id is None:\n            self._client_id = self.get_client_id()",
        "detail": "src.utils.dynamics_client",
        "documentation": {}
    },
    {
        "label": "STVAdminExportClient",
        "kind": 6,
        "importPath": "src.STVAdmin_export_client",
        "description": "src.STVAdmin_export_client",
        "peekOfCode": "class STVAdminExportClient:\n    tag_base_member = \"BaseMember\"\n    tag_non_member_newsletter_recipient = \"NonMemberNewsletterRecipient\"\n    def __init__(self, path: Optional[str] = None, keep_files: Optional[bool]=False, debugging_mode: Optional[bool]=False):\n        self.path = path or WORKING_DIR_PATH\n        self.path = Path(self.path)\n        Path(os.path.join(self.path,OUTPUT_FOLDER)).mkdir(parents=True, exist_ok=True)\n        self._userlist_filename: Optional[Path] = None\n        self._riegenlist_filename: Optional[Path] = None\n        self._main_db = None",
        "detail": "src.STVAdmin_export_client",
        "documentation": {}
    },
    {
        "label": "OUTPUT_FOLDER",
        "kind": 5,
        "importPath": "src.STVAdmin_export_client",
        "description": "src.STVAdmin_export_client",
        "peekOfCode": "OUTPUT_FOLDER = \"OUT\"\nFILENAME_ADDITIONAL_PEOPLE = \"Newsletter_Zusaetzlich.xlsx\"\nFILENAME_BACKUP_LIST = \"TVW_Mitglieder_Backup_10_23.xlsx\"\nFILENAME_REMOVE_LIST = \"Newsletter_abmeldungen.xlsx\"\nFILENAME_JUBILARE = \"TVW_List_OUT_Jubilare_{year}.xlsx\"\nFILENAME_NEUMITGLIEDER = \"TVW_List_OUT_neumitglieder.xlsx\"\nFILENAME_JUGENDUEBERTRITT = \"TVW_List_OUT_jugenduebertritte.xlsx\"\nFILENAME_LOST_EMAIL = \"TVW_List_OUT_lost_email.xlsx\"\nclass STVAdminExportClient:\n    tag_base_member = \"BaseMember\"",
        "detail": "src.STVAdmin_export_client",
        "documentation": {}
    },
    {
        "label": "FILENAME_ADDITIONAL_PEOPLE",
        "kind": 5,
        "importPath": "src.STVAdmin_export_client",
        "description": "src.STVAdmin_export_client",
        "peekOfCode": "FILENAME_ADDITIONAL_PEOPLE = \"Newsletter_Zusaetzlich.xlsx\"\nFILENAME_BACKUP_LIST = \"TVW_Mitglieder_Backup_10_23.xlsx\"\nFILENAME_REMOVE_LIST = \"Newsletter_abmeldungen.xlsx\"\nFILENAME_JUBILARE = \"TVW_List_OUT_Jubilare_{year}.xlsx\"\nFILENAME_NEUMITGLIEDER = \"TVW_List_OUT_neumitglieder.xlsx\"\nFILENAME_JUGENDUEBERTRITT = \"TVW_List_OUT_jugenduebertritte.xlsx\"\nFILENAME_LOST_EMAIL = \"TVW_List_OUT_lost_email.xlsx\"\nclass STVAdminExportClient:\n    tag_base_member = \"BaseMember\"\n    tag_non_member_newsletter_recipient = \"NonMemberNewsletterRecipient\"",
        "detail": "src.STVAdmin_export_client",
        "documentation": {}
    },
    {
        "label": "FILENAME_BACKUP_LIST",
        "kind": 5,
        "importPath": "src.STVAdmin_export_client",
        "description": "src.STVAdmin_export_client",
        "peekOfCode": "FILENAME_BACKUP_LIST = \"TVW_Mitglieder_Backup_10_23.xlsx\"\nFILENAME_REMOVE_LIST = \"Newsletter_abmeldungen.xlsx\"\nFILENAME_JUBILARE = \"TVW_List_OUT_Jubilare_{year}.xlsx\"\nFILENAME_NEUMITGLIEDER = \"TVW_List_OUT_neumitglieder.xlsx\"\nFILENAME_JUGENDUEBERTRITT = \"TVW_List_OUT_jugenduebertritte.xlsx\"\nFILENAME_LOST_EMAIL = \"TVW_List_OUT_lost_email.xlsx\"\nclass STVAdminExportClient:\n    tag_base_member = \"BaseMember\"\n    tag_non_member_newsletter_recipient = \"NonMemberNewsletterRecipient\"\n    def __init__(self, path: Optional[str] = None, keep_files: Optional[bool]=False, debugging_mode: Optional[bool]=False):",
        "detail": "src.STVAdmin_export_client",
        "documentation": {}
    },
    {
        "label": "FILENAME_REMOVE_LIST",
        "kind": 5,
        "importPath": "src.STVAdmin_export_client",
        "description": "src.STVAdmin_export_client",
        "peekOfCode": "FILENAME_REMOVE_LIST = \"Newsletter_abmeldungen.xlsx\"\nFILENAME_JUBILARE = \"TVW_List_OUT_Jubilare_{year}.xlsx\"\nFILENAME_NEUMITGLIEDER = \"TVW_List_OUT_neumitglieder.xlsx\"\nFILENAME_JUGENDUEBERTRITT = \"TVW_List_OUT_jugenduebertritte.xlsx\"\nFILENAME_LOST_EMAIL = \"TVW_List_OUT_lost_email.xlsx\"\nclass STVAdminExportClient:\n    tag_base_member = \"BaseMember\"\n    tag_non_member_newsletter_recipient = \"NonMemberNewsletterRecipient\"\n    def __init__(self, path: Optional[str] = None, keep_files: Optional[bool]=False, debugging_mode: Optional[bool]=False):\n        self.path = path or WORKING_DIR_PATH",
        "detail": "src.STVAdmin_export_client",
        "documentation": {}
    },
    {
        "label": "FILENAME_JUBILARE",
        "kind": 5,
        "importPath": "src.STVAdmin_export_client",
        "description": "src.STVAdmin_export_client",
        "peekOfCode": "FILENAME_JUBILARE = \"TVW_List_OUT_Jubilare_{year}.xlsx\"\nFILENAME_NEUMITGLIEDER = \"TVW_List_OUT_neumitglieder.xlsx\"\nFILENAME_JUGENDUEBERTRITT = \"TVW_List_OUT_jugenduebertritte.xlsx\"\nFILENAME_LOST_EMAIL = \"TVW_List_OUT_lost_email.xlsx\"\nclass STVAdminExportClient:\n    tag_base_member = \"BaseMember\"\n    tag_non_member_newsletter_recipient = \"NonMemberNewsletterRecipient\"\n    def __init__(self, path: Optional[str] = None, keep_files: Optional[bool]=False, debugging_mode: Optional[bool]=False):\n        self.path = path or WORKING_DIR_PATH\n        self.path = Path(self.path)",
        "detail": "src.STVAdmin_export_client",
        "documentation": {}
    },
    {
        "label": "FILENAME_NEUMITGLIEDER",
        "kind": 5,
        "importPath": "src.STVAdmin_export_client",
        "description": "src.STVAdmin_export_client",
        "peekOfCode": "FILENAME_NEUMITGLIEDER = \"TVW_List_OUT_neumitglieder.xlsx\"\nFILENAME_JUGENDUEBERTRITT = \"TVW_List_OUT_jugenduebertritte.xlsx\"\nFILENAME_LOST_EMAIL = \"TVW_List_OUT_lost_email.xlsx\"\nclass STVAdminExportClient:\n    tag_base_member = \"BaseMember\"\n    tag_non_member_newsletter_recipient = \"NonMemberNewsletterRecipient\"\n    def __init__(self, path: Optional[str] = None, keep_files: Optional[bool]=False, debugging_mode: Optional[bool]=False):\n        self.path = path or WORKING_DIR_PATH\n        self.path = Path(self.path)\n        Path(os.path.join(self.path,OUTPUT_FOLDER)).mkdir(parents=True, exist_ok=True)",
        "detail": "src.STVAdmin_export_client",
        "documentation": {}
    },
    {
        "label": "FILENAME_JUGENDUEBERTRITT",
        "kind": 5,
        "importPath": "src.STVAdmin_export_client",
        "description": "src.STVAdmin_export_client",
        "peekOfCode": "FILENAME_JUGENDUEBERTRITT = \"TVW_List_OUT_jugenduebertritte.xlsx\"\nFILENAME_LOST_EMAIL = \"TVW_List_OUT_lost_email.xlsx\"\nclass STVAdminExportClient:\n    tag_base_member = \"BaseMember\"\n    tag_non_member_newsletter_recipient = \"NonMemberNewsletterRecipient\"\n    def __init__(self, path: Optional[str] = None, keep_files: Optional[bool]=False, debugging_mode: Optional[bool]=False):\n        self.path = path or WORKING_DIR_PATH\n        self.path = Path(self.path)\n        Path(os.path.join(self.path,OUTPUT_FOLDER)).mkdir(parents=True, exist_ok=True)\n        self._userlist_filename: Optional[Path] = None",
        "detail": "src.STVAdmin_export_client",
        "documentation": {}
    },
    {
        "label": "FILENAME_LOST_EMAIL",
        "kind": 5,
        "importPath": "src.STVAdmin_export_client",
        "description": "src.STVAdmin_export_client",
        "peekOfCode": "FILENAME_LOST_EMAIL = \"TVW_List_OUT_lost_email.xlsx\"\nclass STVAdminExportClient:\n    tag_base_member = \"BaseMember\"\n    tag_non_member_newsletter_recipient = \"NonMemberNewsletterRecipient\"\n    def __init__(self, path: Optional[str] = None, keep_files: Optional[bool]=False, debugging_mode: Optional[bool]=False):\n        self.path = path or WORKING_DIR_PATH\n        self.path = Path(self.path)\n        Path(os.path.join(self.path,OUTPUT_FOLDER)).mkdir(parents=True, exist_ok=True)\n        self._userlist_filename: Optional[Path] = None\n        self._riegenlist_filename: Optional[Path] = None",
        "detail": "src.STVAdmin_export_client",
        "documentation": {}
    },
    {
        "label": "TestCleverreachDatabase",
        "kind": 6,
        "importPath": "tests.test_cleverreach_database",
        "description": "tests.test_cleverreach_database",
        "peekOfCode": "class TestCleverreachDatabase(TestCase):\n    def test_load_cleverreach_database(self):\n        file = \"tests/data/test_database.xlsx\"\n        cr_db = CleverreachDatabase(file)\n        expected_df = pd.read_csv(\"tests/data/test_cleverreach_database_expected_output.csv\")\n        for col in expected_df.columns:\n            if col == \"updated\":\n                expected_df[col] = [pd.Timestamp.now().floor(freq='D') for _ in expected_df[col].values]\n            if col == \"Email\":\n                expected_df[col] = [val if not isinstance(val, type(np.nan)) else None for val in expected_df[col].values]",
        "detail": "tests.test_cleverreach_database",
        "documentation": {}
    },
    {
        "label": "TestDatabase",
        "kind": 6,
        "importPath": "tests.test_database",
        "description": "tests.test_database",
        "peekOfCode": "class TestDatabase(TestCase):\n    def test_load_database_excel(self):\n        file = \"tests/data/test_database.xlsx\"\n        db = Database(file)\n        self.assertTrue(len(db.people) == 4)\n    def test_load_database_csv(self):\n        file = \"tests/data/test_database.csv\"\n        db = Database(file)\n        self.assertTrue(len(db.people) == 4)\n    def test_lookup_by_property(self):",
        "detail": "tests.test_database",
        "documentation": {}
    },
    {
        "label": "TestMailBasedDatabase",
        "kind": 6,
        "importPath": "tests.test_mail_based_database",
        "description": "tests.test_mail_based_database",
        "peekOfCode": "class TestMailBasedDatabase(TestCase):\n    def test_load_mail_based_database_csv(self):\n        file = \"tests/data/test_database.csv\"\n        mb_db = MailBasedDatabase(file)\n        self.assertTrue(len(mb_db.mail_based_families) == 3)\n        mb_db.add_mail_based_family(MailBasedFamily([Person(emails=[\"email3\"])]))\n        self.assertTrue(len(mb_db.mail_based_families) == 3)\n        self.assertTrue(len(mb_db.mail_based_families[1].people)==3)\n        self.assertTrue(len(mb_db.lookup_by_property(\"email\", None))==1)\n    def test_load_mail_based_database_excel(self):",
        "detail": "tests.test_mail_based_database",
        "documentation": {}
    },
    {
        "label": "TestPerson",
        "kind": 6,
        "importPath": "tests.test_person",
        "description": "tests.test_person",
        "peekOfCode": "class TestPerson(TestCase):\n    def test_age(self):\n        me = Person(birthday=\"22.08.1996\")\n        me.age\n        age1 = me.calculate_age_at_ts(pd.Timestamp(\"2023-08-21\"))\n        age2 = me.calculate_age_at_ts(pd.Timestamp(\"2023-08-22\"))\n        self.assertEqual(age1, 26)\n        self.assertEqual(age2, 27)",
        "detail": "tests.test_person",
        "documentation": {}
    },
    {
        "label": "setup_page",
        "kind": 2,
        "importPath": "home",
        "description": "home",
        "peekOfCode": "def setup_page():\n    st.set_page_config(page_title=\"STVAdmin Export\")\n    st.markdown(\n        \"\"\"\n        <style>\n        body {\n            background-color: white;\n            color: #878787;\n        }\n        h1 {",
        "detail": "home",
        "documentation": {}
    },
    {
        "label": "configure_title",
        "kind": 2,
        "importPath": "home",
        "description": "home",
        "peekOfCode": "def configure_title():\n    st.markdown(\"# STVAdmin Export\")\n    st.markdown(\"Export various lists from STVAdmin\")\ndef configure_download_data():\n    st.markdown(\"## Setup\", unsafe_allow_html=True)\n    if not data_is_available():\n        st.markdown(\"Retrieve the data from the Microsoft Dynamics Database\")\n        if st.button(label=\"Download data\"):\n            st.toast(\"Downloading data...\")\n            st.session_state.client.main_db",
        "detail": "home",
        "documentation": {}
    },
    {
        "label": "configure_download_data",
        "kind": 2,
        "importPath": "home",
        "description": "home",
        "peekOfCode": "def configure_download_data():\n    st.markdown(\"## Setup\", unsafe_allow_html=True)\n    if not data_is_available():\n        st.markdown(\"Retrieve the data from the Microsoft Dynamics Database\")\n        if st.button(label=\"Download data\"):\n            st.toast(\"Downloading data...\")\n            st.session_state.client.main_db\n            st.toast(\"Finished downloading data.\")\n            st.rerun()\n    else:",
        "detail": "home",
        "documentation": {}
    },
    {
        "label": "configure_export_buttons",
        "kind": 2,
        "importPath": "home",
        "description": "home",
        "peekOfCode": "def configure_export_buttons():\n    st.markdown(\"## Export\", unsafe_allow_html=True)\n    if not data_is_available():\n        st.markdown(\"Data is not available\")\n        return\n    # Button status trackers in session state\n    if 'success_buttons' not in st.session_state:\n        st.session_state.success_buttons = {}\n    # Button grid for other exports\n    col1, col2 = st.columns(2)",
        "detail": "home",
        "documentation": {}
    },
    {
        "label": "reset_client",
        "kind": 2,
        "importPath": "home",
        "description": "home",
        "peekOfCode": "def reset_client():\n    if isinstance(st.session_state.client, STVAdminExportClient):\n        del st.session_state.client\n    st.session_state.client = STVAdminExportClient(keep_files=False)\ndef data_is_available():\n    if st.session_state.client._userlist_filename is None or st.session_state.client._riegenlist_filename is None:\n        return False\n    return True\ndef configure_stop():\n    st.markdown('<div class=\"section-spacing\"></div>', unsafe_allow_html=True)",
        "detail": "home",
        "documentation": {}
    },
    {
        "label": "data_is_available",
        "kind": 2,
        "importPath": "home",
        "description": "home",
        "peekOfCode": "def data_is_available():\n    if st.session_state.client._userlist_filename is None or st.session_state.client._riegenlist_filename is None:\n        return False\n    return True\ndef configure_stop():\n    st.markdown('<div class=\"section-spacing\"></div>', unsafe_allow_html=True)\n    st.markdown('<hr style=\"border:1px solid #e0e0e0; margin:10px 0;\">', unsafe_allow_html=True)\n    if st.button(\"Shut down\"):\n        os.kill(os.getpid(), signal.SIGTERM)\ndef main():",
        "detail": "home",
        "documentation": {}
    },
    {
        "label": "configure_stop",
        "kind": 2,
        "importPath": "home",
        "description": "home",
        "peekOfCode": "def configure_stop():\n    st.markdown('<div class=\"section-spacing\"></div>', unsafe_allow_html=True)\n    st.markdown('<hr style=\"border:1px solid #e0e0e0; margin:10px 0;\">', unsafe_allow_html=True)\n    if st.button(\"Shut down\"):\n        os.kill(os.getpid(), signal.SIGTERM)\ndef main():\n    if \"client\" not in st.session_state:\n        st.session_state.client = STVAdminExportClient()\n    setup_page()\n    configure_title()",
        "detail": "home",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "home",
        "description": "home",
        "peekOfCode": "def main():\n    if \"client\" not in st.session_state:\n        st.session_state.client = STVAdminExportClient()\n    setup_page()\n    configure_title()\n    configure_download_data()\n    configure_export_buttons()\n    configure_stop()\nif __name__ == \"__main__\":\n    main()",
        "detail": "home",
        "documentation": {}
    }
]